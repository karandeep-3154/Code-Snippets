
//https://ideone.com/olR2Ne

#include<bits/stdc++.h>
using namespace std;

void buildTree(int* arr,int* tree,int start,int end,int treeNode){

	if(start == end){
		tree[treeNode] = arr[start];
		return;
	}
	int mid = (start+end)/2;

	buildTree(arr,tree,start,mid,2*treeNode);
	buildTree(arr,tree,mid+1,end,2*treeNode+1);
	tree[treeNode] = min(tree[2*treeNode],tree[2*treeNode+1]);
}

void updateSegmentTreeLazy(int* tree,int* lazy,int low,int high,int startR,int endR,int currPos,int inc){

	if(low > high){
		return;
	}

	if(lazy[currPos] !=0){
		tree[currPos] += lazy[currPos];

		if(low!=high){
			lazy[2*currPos] += lazy[currPos];
			lazy[2*currPos+1] += lazy[currPos];
		}
		lazy[currPos] = 0;
	}

	// No overlap
	if(startR > high || endR < low){
		return;
	}

	// Complete Overlap

	if(startR<= low && high <= endR){
		tree[currPos] += inc;
		if(low!=high){
			lazy[2*currPos] += inc;
			lazy[2*currPos+1] += inc;
		}
		return;
	}

	// Partial Overlap

	int mid = (low+high)/2;
	updateSegmentTreeLazy(tree,lazy,low,mid,startR,endR,2*currPos,inc);
	updateSegmentTreeLazy(tree,lazy,mid+1,high,startR,endR,2*currPos+1,inc);
	tree[currPos] = min(tree[2*currPos],tree[2*currPos+1]);
}

int querySegmentTreeLazy(int* tree, int* lazy, int low, int high, int queryLow, int queryHigh, int currPos) {
    // Propagate pending updates from lazy tree to segment tree at the current node
    if (lazy[currPos] != 0) {
        tree[currPos] += lazy[currPos];

        if (low != high) {
            lazy[2 * currPos] += lazy[currPos];
            lazy[2 * currPos + 1] += lazy[currPos];
        }

        lazy[currPos] = 0;
    }

    // No overlap
    if (queryLow > high || queryHigh < low) {
        return INT_MAX; // Assuming a suitable value for no overlap
    }

    // Complete Overlap
    if (queryLow <= low && queryHigh >= high) {
        return tree[currPos];
    }

    // Partial Overlap
    int mid = (low + high) / 2;
    int leftResult = querySegmentTreeLazy(tree, lazy, low, mid, queryLow, queryHigh, 2 * currPos);
    int rightResult = querySegmentTreeLazy(tree, lazy, mid + 1, high, queryLow, queryHigh, 2 * currPos + 1);

    return min(leftResult, rightResult);
}

int main(){

	int arr[] = {1,-2,-3,4,5};
	int* tree = new int[21]();
	buildTree(arr,tree,0,4,1);
	int* lazy = new int[21]();
	updateSegmentTreeLazy(tree,lazy,0,4,1,3,1,3);
	updateSegmentTreeLazy(tree,lazy,0,4,3,4,1,-6);
	
	int ans = querySegmentTreeLazy(tree, lazy, 0, 4, 1, 4, 1);
	cout<<ans;
	
	return 0;
}

