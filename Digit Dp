Find count of all numbers between l and r whose sum of digits is X.
NOTE:- FOR CALCULATING L TO R, THE IDEA IS TO DO DP[R]-DP[L-1]. BUT, SOMETIMES IT IS NOT POSSIBLE TO DO -1 TO L AS L CAN BE A BIG STRING ITSELF. SO, FOR THAT CASE WE CALCULATING DP[R]-DP[L] WHICH WILL GIVE
FOR L+1 TO R BUT SINCE WE WANTED FOR L TO R. SO, SIMPLY CHECK IF L FITS OUR CRITERIA AND IF IT DOES DO +1 IN OUR ANS ELSE RETURN THAT SAME ANS ONLY.

//REFER https://www.youtube.com/watch?v=heUFId6Qd1A&t=962s

int solve(string &num, int n, int x, int tight){

      if(n == 0){
          if(x == 0)
            return 1;
          else
            return 0;
      }

      int ans=0, ub = tight ? num[(num.size()-n) - '0')) : 9;

      for(int dig = 0; dig<=ub; dig++){

          ans+=solve(num, n-1, x-dig, tight&&(dig == ub));

      }

      return ans;
    
}
